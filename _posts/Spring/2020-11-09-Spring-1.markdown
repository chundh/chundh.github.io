---
layout: post
title:  "Spring-1"
categories: [Class, Spring]
---

##

### 브라우저와 서버의 연결 과정
1. 브라우저에서 서버로 세션을 연결한다.
2. 브라우저에서 서버로 Request를 보낸다.
3. 서버에서 Response를 보낸다.
4. 세션을 끊는다.

- 쿠키 생성
- 위 방식의 문제점은 동일한 작업을 지속할때, 세션이 끊어져서 다시 연결해야한다는 것이다.
- 이를 해결하기 위해 생긴 것이 쿠키이다.
- HTTP 헤더에 쿠키를 저장하고, 쿠키가 있는 경우 쿠키에 있는 정보를 기반으로 연결

- 세션 트랙킹
- 쿠키 값을 세션에 저장한다.
- 기존에 방문한 쿠키의 경우 해당 정보를 가져와서 사용한다.


### Get
- 데이터를 URI에 덧붙여서 전송한다.
- 데이터 전송량에 한계가 있다.
- 보안성이 POST방식보다 약하다.

### Post
- 내용이 URI에 보이지 않는다.
- 데이터가 Encoding 되서 스트림 형태로 body에 저장되므로 보안성이 우수하다.
- 스트림 형태로 전송되므로 전송용량에 제한을 받지 않는다.
- 응답코드
  - 2xx: 웹서버가 성공적으로 클라이언트의 요청에 응답함.
  - 3xx: 다른페이지로 재연결할 필요가 있음.
  - 4xx: 클라이언트에 오류가 있음.
  - 5xx: 서버에서 에러가 발생했음.

### Put
- URI를 통해 정보의 수정, 변경을 요청한다.


### WAS?


### web.xml
- web에 관련된 전체 사전 설정을 하는 곳.

### Context
- 어플리케이션 하나의 시작부터 끝가지의 흐름
- URI에서 포트번호 뒤에 것들이 하나의 Context이다.

### 트랜잭션 컨텍스트?
- 하나의 트랜잭션이 완벽히 처리되던지, 처리되지 않으면 기존 상태로 돌아가야한다. Atomic 속성


### Add configuration
- Tomcat 연결할 때 밑에 `Warning: No artifacts marked for deployment`와 함께 Fix가 뜬다.
- 이때 Fix를 exploded로 바꿔주고 context를 바꿀 수 있다.